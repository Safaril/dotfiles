[include]
  path = ~/.gitconfig-user
[color]
  ui = auto
[pretty]
  colored = format:%C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an, %cr]%Creset
[gist]
  browse = true
[push]
  default = simple
[pull]
  rebase = true
[fetch]
  prune = 1
[rerere]
  enabled = 1
[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  mergeoptions = --no-edit
  commitGraph = true
[help]
  autocorrect = 1
[alias]
  ## 'New' Commands
  # Unstage the changes in a given file.
  unstage = reset HEAD --
  # View the current changes in the staging area.
  staged = diff --cached
  # Print the name of the current branch.
  current-branch = symbolic-ref --short HEAD
  # Print the name of the current upstream tracking branch.
  upstream = !git config --get branch.$(git current-branch).remote \
           || echo origin
  # Cherry-pick a commit with your signature.
  sign = cherry-pick --signoff
  # List all current SVN externals for this repository.
  svn-externals = !git svn show-externals | grep -x \\"[^#].*\\"
  # Create a git:// server of the current repository.
  # WARNING: this gives all users read/write access
  # without authentication (so only use on trusted networks).
  serve = !git daemon --reuseaddr --export-all --base-path=. \
                      --verbose ./.git
  # Merge a branch and commit a merge commit (even if one
  # isn't needed)
  noff = merge --no-ff
  # Merge a branch with a merge commit and resolve any conflicts
  # always using that branch's version rather than the current branch.
  theirs = !git noff -Xtheirs
  # Fetch all branches and rebase the current branch against
  # upstream/master.
  rebase-against-master = !git fetch --all \
                        && git rebase $(git upstream)/master
  # Push the current branch upstream to origin using the same branch
  # name for the remote branch.
  upstream-current-branch = !git push --set-upstream origin \
                           $(git current-branch)
  # Create a pull request on GitHub using the `hub` command.
  pull-request = !rm -f .git/PULLREQ_EDITMSG && hub pull-request -o
  # Upstream the current branch to origin and create a pull request
  # on GitHub.
  upstream-and-pull-request = !git upstream-current-branch \
                            && git pull-request
  # Get the current diff but show differences between characters
  # instead of just the differences between lines.
  word-diff = diff --word-diff
  # Push the current branch and set it as the default upstream branch.
  push-and-set-upstream = push --set-upstream
  # Create a new branch by checking out another branch.
  checkout-as-new-branch = checkout -b
  # Rebase against origin/master and prompt for what operations
  # should be performed.
  interactively-rebase-against-origin-master = \
    !git rebase --interactive origin/master
  # Show the commit log with a prettier, clearer history.
  pretty-one-line-log = log --graph --oneline --decorate
  # Commit any changes to files, squash them into the last commit
  # and update its date.
  fix-up-previous-commit = !git commit --all --amend \
                                --reuse-message=HEAD --date=\"$(date)\" #"
  # Checkout the master branch and update it.
  pull-master = !git checkout master && git pull
  # Commit a work-in-progress commit (to use with
  # fix-up-previous-commit)
  work-in-progress = commit -a -m 'WIP'
  # Merge a branch with a merge commit and use the more time-consuming
  # patience diff algorithm
  patience = !git noff -Xpatience
  # Hard reset branch to the upstream version.
  hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
  # Assume the specified file is unchanged to stop changes
  # being seen by Git
  assume = update-index --assume-unchanged
  # No longer assume a specified file remains unchanged
  unassume = update-index --no-assume-unchanged
  # List all files that are assumed to be unchanged
  assumed = !git ls-files -v | grep '^[hsmrck?]' | cut -c 3-
  # Delete all non-master branches
  delete-merged = !git branch --merged | grep -v 'master' | grep -v '*' | xargs -n 1 git branch -D
  # Get the merge-base compared to origin/master
  merge-base-master = merge-base origin/master HEAD
  # Diff against the current branch's merge-base
  diff-merge-base = !git diff $(git merge-base-master)

  ## Shortened 'New' Commands
  fahr = !git fetch --all && git hard-reset
  rem = !git rebase-against-master
  wip = !git work-in-progress
  pr = !git upstream-and-pull-request
  up = !git upstream-current-branch
  fa = !git fetch --all
  pf = !git push --force-with-lease
  dm = !git diff-merge-base
  mb = !git merge-base-master
  w = !git word-diff
  u = !git push-and-set-upstream
  b = !git checkout-as-new-branch
  i = !git interactively-rebase-against-origin-master
  # `true` needed as the return status is wrong otherwise.
  l = !git pretty-one-line-log || true
  f = !git fix-up-previous-commit

  ## Shortened Existing Commands
  p = pull
  s = status --short --branch
[instaweb]
  httpd = webrick
[diff]
  algorithm = patience
  compactionheuristic = true
[diff "xml"]
  textconv = xmllint --format --recover
[mergetool]
  prompt = false
  keepBackup = false
  keepTemporaries = false
[mergetool "opendiff"]
  path = git-mergetool-opendiff
[apply]
  whitespace = fix
[rebase]
  autoStash = true
  autoSquash = true
[url "git@github.com:"]
  pushInsteadOf = git://github.com/
[url "git@gitorious.org:"]
  pushInsteadOf = git://gitorious.org/
[credential]
  helper = osxkeychain
[hub]
  protocol = https
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  required = true
  process = git-lfs filter-process
[commit]
  verbose = true
  gpgsign = true
[user]
  name = Justin Kenyon
  email = kenyonj@gmail.com
  signingkey = 2538E93E
[github]
  user = kenyonj
[gpg]
  program = gpg
